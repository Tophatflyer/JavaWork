CH6 NOTES

Controlling Access to Class Members:
	Two major benefits of the class:
		1. Links data with the code that manipulates it.
		2. provides the means by which access to the members is controlled.

	Public:
		member can be freely accessed by code defined outside of the class.
	Private:
		member can be accessed only by other methods defined in the class.

	Java Access Modifiers:
		Three Access Modifiers:
			Public (default access modifier).
			Private.
			Protected (applies when inheritance is involved).

		Package:
			A group of classes

	How arguments are passed:
		call-by-value:
			copies the value of an argument into the formal parameter of the subroutine. Changes made to the parameter in the subroutine do not affect the argument.
		call-by-reference:
			passes the reference of the object into the parameter. Reference is used to access the actual argument. Changes made to the parameter will affect the argument.

		Primitive Types:
			primitive types such as int or double are passed by value. 
		Objects:
			Objects are implicitly passed by reference. This is because when you create an instance of an object, you are storing the reference address in the variable.
		
			NOTE: The object reference that is passed to the argument is passed by value. However, since the object reference, references the same object, it will still refer to the same object referred by the original object reference.

	Returning Objects:
		A method is able to return any type of data, including class types.

	Method Overloading:
		When two or more methods within a class share the same name, but their parameters are different. This is known as Method Overloading. Method overloading is one of the ways that Java implements overloading.

		Java Methods employ type promotion when there is no method with the same data type argument. For instance, if byte is passed to an overloaded method where there are only void methodA(int a) and void methodA(double A) then it will be promoted to int.

		Polymorphism:
			Method Overloading supports Polymorphism because of the concept of "One interface, many methods" paradigm.

	Overloading Constructors:
		Constructor methods can be overloaded just like regular class methods by their signature parameters.

		It is often useful to overload a constructor which uses one object o initialize another for efficiency.

	Recursion:
		A method that calls itself in a circular fashion. 

		When a recursive call is made, a new copy of the method is not created. The new argument is stored on the stack and the method will be run from the start with the new argument.

		When a recursive call returns, it will execute on the underlying method from where it started.

		recursive methods require a conditional statement to force the method to return. This will prevent infinite recursion.

	Static:
		the keyword static is used when a class member will be used independently of any object of that class.

		Ex. main() method is declared static because it must be called by the JVM when the program begins.

		Outside of a class, in order to use a static member, the class name and the dot operator is used to access it. No object needs to be created.

		Variables declared as static are essentially global variables.

		When an object is declared, no copy of the static variable is made. Also, all instances of the class share the same static variable.

		Ex. If static count = 10; is declared in the class ShowStatic.

			class ShowStatic{
				static int count = 10;
				int countInd = 5; //this variable will not be shared.
			}

			class ShowStaticDemo{
				ShowStatic demo = new ShowStatic();
				showStatic demo2 = new ShowStatic();

				System.out.println("demo count is: " + demo.count);   //demo.count = 10;
				System.out.println("demo2 count is: " + demo2.count); //demo2.count = 10;

				demo.count = 20;

				System.out.println("demo count is: " + demo.count);	  //demo.count = 20;
				System.out.println("demo2 count is: " + demo2.count); //demo2.count = 20;
			}


		Static Method:
			Static methods can be called directly with the class name and the dot operator without creating an object.

			Static methods have rules:
				1. They can only directly call other static methods.
				2. They can only directly access static data.
				3. They do not have a this reference.

		Static Block:
			Java allows for static blocks for some type of initialization process. This is important as some static variables may need to be initialized before static methods are called. 



































