1. Write a program that reads characters from the keyboard until a period is received. Have the
program count the number of spaces. Report the total at the end of the program.
//Chapter3Q1.java

2. Show the general form of the if-else-if ladder.

	if(condition){
		statement;
	}else if(condition){
		statement;
	}else if(condition){
		statement;
	}
	.
	.
	.
	else{ //optional if all possible conditions are covered
		statement;
	}

3. Given
if(x < 10)
	if(y > 100) {
		if(!done) x = z;
		else y = z;
	}
	else System.out.println("error"); // what if?

to what if does the last else associate?
The last else associates with the 2nd if statement as the else associates itself with the closest if statement which is if(y > 100)

4. Show the for statement for a loop that counts from 1000 to 0 by â€“2.
	
	int counter = 0;
	for(int i = 1000; i >= 0 i-= 2){
		System.out.print( i + " ");
		counter++;
		if(counter == 10){
			System.out.println();
		}
	}

5. Is the following fragment valid?

for(int i = 0; i < num; i++)
	sum += i;
count = i;

No, the given code fragment is invalid as i is not visible to count because i is within the for loop and goes out of scope once the for loop ends. This results in i being undefined for count when the assignment operation occurs.

6. Explain what break does. Be sure to explain both of its forms.
	break pre-maturely escapes the given loop. There are two forms of break. The one without the label which will just go to the closest outerloop or breaks out of the switch statement. The one with a label will jump to the specified labels block and go to the end of that block.

7. In the following fragment, after the break statement executes, what is displayed?

for(i = 0; i < 10; i++) {
	while(running) {
		if(x<y) break;
		// ...
	}
	System.out.println("after while");
}
System.out.println("After for");

Given this fragment, when the break statement executes, it will go out of the while loop block and the System.out.println("after while"); will execute.

8. What does the following fragment print?

for(int i = 0; i<10; i++) {
	System.out.print(i + " ");
	if((i%2) == 0) continue;
		System.out.println();
}

whenever i%2 == 0 is true, it will skip the System.out.println() because continue executes. 

This means the output is:
	0 1
	2 3
	4 5
	6 7
	8 9

9. The iteration expression in a for loop need not always alter the loop control variable by a
fixed amount. Instead, the loop control variable can change in any arbitrary way. Using this
concept, write a program that uses a for loop to generate and display the progression 1, 2, 4,
8, 16, 32, and so on.
//Chapter3Q9.java

10. The ASCII lowercase letters are separated from the uppercase letters by 32. Thus, to convert
a lowercase letter to uppercase, subtract 32 from it. Use this information to write a program
that reads characters from the keyboard. Have it convert all lowercase letters to uppercase,
and all uppercase letters to lowercase, displaying the result. Make no changes to any other
character. Have the program stop when the user enters a period. At the end, have the program
display the number of case changes that have taken place.
//Chapter3Q10.java

11. What is an infinite loop?
	An infinite loop is a loop where there is no way to set the condition to false resulting in the termination of the loop

12. When using break with a label, must the label be on a block that contains the break?
	Yes, the label must be on a block that contains the break.